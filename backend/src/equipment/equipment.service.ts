import { Express } from 'express';
import {
  Injectable,
  NotFoundException,
  ConflictException,
  InternalServerErrorException,
} from '@nestjs/common';
import { DatabaseService } from '../database/database.service';
import * as path from 'path';
import { NotificationService } from '../notifications/notification.service';
import { Role } from '../enums/user.enums';
import * as bcrypt from 'bcryptjs'; // –î–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
import { NotificationType } from '../notifications/dto/create-notification.dto';
import axios from 'axios';

// ==========================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// ==========================
async function notifyTelegramGroup(message: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const groupChatId = process.env.TELEGRAM_GROUP_CHAT_ID;
  if (!botToken || !groupChatId) return;
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  try {
    await axios.post(url, {
      chat_id: groupChatId,
      text: message,
      parse_mode: 'Markdown',
    });
  } catch (error) {
    if (process.env.NODE_ENV !== 'production') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', (error as any).message);
    }
  }
}

type EquipmentInputDto = {
  inventoryNumber: string;
  name: string;
  type: string;
  macAddress?: string;
  ipAddress?: string;
  login?: string;
  password?: string;
  location: string;
  floor?: string;
  cabinet?: string;
  assignedToUserId?: number | null;
};

@Injectable()
export class EquipmentService {
  constructor(
    private readonly db: DatabaseService,
    private readonly notifications: NotificationService,
  ) {}

  async getAll() {
    const equipment = await this.db.equipment.findMany({
      orderBy: { createdAt: 'desc' },
      relations: {
        assignedTo: true,
        assignedUsers: true,
        software: true,
      },
    });

    return equipment.map((e) => ({
      id: e.id,
      inventoryNumber: e.inventoryNumber,
      name: e.name,
      type: e.type,
      macAddress: e.macAddress,
      ipAddress: e.ipAddress,
      login: e.login,
      location: e.location,
      floor: e.floor,
      cabinet: e.cabinet,
      createdAt: e.createdAt,
      fileUrls: e.fileUrls,
      assignedTo: e.assignedTo
        ? {
            id: e.assignedTo.id,
            firstName: e.assignedTo.firstName,
            lastName: e.assignedTo.lastName,
            middleName: e.assignedTo.middleName,
            department: e.assignedTo.department,
          }
        : null,
      assignedUsers: e.assignedUsers?.map((u) => ({
        id: u.id,
        firstName: u.firstName,
        lastName: u.lastName,
        middleName: u.middleName,
        department: u.department,
      })),
      software: e.software?.map((s) => ({
        id: s.id,
        name: s.name,
        version: s.version,
      })),
    }));
  }

  async findById(id: number) {
    const equipment = await this.db.equipment.findUnique({
      where: { id },
      relations: {
        assignedTo: true,
        assignedUsers: true,
        software: true,
      },
    });
    if (!equipment) throw new NotFoundException('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

    return {
      id: equipment.id,
      inventoryNumber: equipment.inventoryNumber,
      name: equipment.name,
      type: equipment.type,
      macAddress: equipment.macAddress,
      ipAddress: equipment.ipAddress,
      login: equipment.login,
      location: equipment.location,
      floor: equipment.floor,
      cabinet: equipment.cabinet,
      createdAt: equipment.createdAt,
      fileUrls: equipment.fileUrls,
      assignedTo: equipment.assignedTo
        ? {
            id: equipment.assignedTo.id,
            firstName: equipment.assignedTo.firstName,
            lastName: equipment.assignedTo.lastName,
            middleName: equipment.assignedTo.middleName,
            department: equipment.assignedTo.department,
          }
        : null,
      assignedUsers: equipment.assignedUsers?.map((u) => ({
        id: u.id,
        firstName: u.firstName,
        lastName: u.lastName,
        middleName: u.middleName,
        department: u.department,
      })),
      software: equipment.software?.map((s) => ({
        id: s.id,
        name: s.name,
        version: s.version,
      })),
    };
  }

  async create(data: EquipmentInputDto) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ inventoryNumber
    const existing = await this.db.equipment.findUnique({
      where: { inventoryNumber: data.inventoryNumber },
    });
    if (existing) {
      throw new ConflictException('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let hashedPassword: string | undefined;
    if (data.password) {
      hashedPassword = await bcrypt.hash(data.password, 10);
    }

    const equipment = await this.db.equipment.create({
      data: {
        ...data,
        password: hashedPassword,
        assignedToUserId: data.assignedToUserId ?? null,
        assignedTo: data.assignedToUserId
          ? { id: data.assignedToUserId }
          : null,
        assignedUsers: data.assignedToUserId
          ? [{ id: data.assignedToUserId } as any]
          : [],
      },
    });

    // –û–ø–æ–≤–µ—â–µ–Ω–∏—è (–ª–∏—á–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã)
    await this.notifications.create({
      role: Role.superuser,
      title: 'üñ• –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      message: `–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ "${equipment.name}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É.`,
      type: NotificationType.EQUIPMENT,
      url: `/admin/equipment`,
    });

    await this.notifications.create({
      role: Role.admin,
      title: 'üñ• –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      message: `–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: "${equipment.name}".`,
      type: NotificationType.EQUIPMENT,
      url: `/admin/equipment`,
    });

    if (equipment.assignedToUserId) {
      const user = await this.db.user.findUnique({
        where: { id: equipment.assignedToUserId },
      });

      if (user) {
        await this.notifications.create({
          userId: user.id,
          title: 'üì¶ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
          message: `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ "${equipment.name}".`,
          type: NotificationType.EQUIPMENT,
          url: `/dashboard/profile`,
        });
      }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram-–≥—Ä—É–ø–ø—É
    await notifyTelegramGroup(
      `üñ• *–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:*\n*${equipment.name}* (${equipment.type})\n–ò–Ω–≤. ‚Ññ: ${equipment.inventoryNumber}`
    );

    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º password!
    const { password, ...safeEquipment } = equipment;
    return safeEquipment;
  }

  async update(id: number, data: Partial<EquipmentInputDto>) {
    const equipment = await this.db.equipment.findUnique({ where: { id } });
    if (!equipment) throw new NotFoundException('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

    // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (data.inventoryNumber && data.inventoryNumber !== equipment.inventoryNumber) {
      const existing = await this.db.equipment.findUnique({
        where: { inventoryNumber: data.inventoryNumber },
      });
      if (existing) {
        throw new ConflictException('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
    }

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å ‚Äî —Ö—ç—à–∏—Ä—É–µ–º
    let updatedPassword: string | undefined;
    if (data.password) {
      updatedPassword = await bcrypt.hash(data.password, 10);
    }

    try {
      const updated = await this.db.equipment.update({
        where: { id },
        data: {
          ...data,
          ...(updatedPassword && { password: updatedPassword }),
          assignedToUserId: data.assignedToUserId ?? null,
          assignedTo: data.assignedToUserId
            ? { id: data.assignedToUserId }
            : null,
          assignedUsers: data.assignedToUserId
            ? [{ id: data.assignedToUserId } as any]
            : [],
        },
      });

      if (!updated) throw new NotFoundException('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º password!
      const { password, ...safeEquipment } = updated;
      return safeEquipment;
    } catch (err) {
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
    }
  }

  async remove(id: number) {
    const equipment = await this.db.equipment.findUnique({ where: { id } });
    if (!equipment) throw new NotFoundException('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    try {
      await this.db.equipment.delete({
        where: { id },
      });
      return { message: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' };
    } catch (err) {
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
    }
  }

  async attachFile(id: number, file: Express.Multer.File) {
    const equipment = await this.db.equipment.findUnique({
      where: { id },
      select: { fileUrls: true },
    });

    if (!equipment) {
      throw new NotFoundException('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    const relativePath = path.relative(process.cwd(), file.path).replace(/\\/g, '/');
    const updatedFiles = [...(equipment.fileUrls || []), relativePath];

    return this.db.equipment.update({
      where: { id },
      data: {
        fileUrls: updatedFiles,
      },
    });
  }
}
