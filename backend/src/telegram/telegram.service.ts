import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import axios from 'axios';
import { Notification } from '../entities/notification.entity';
import { Role, Department } from '../enums/user.enums';
import { DatabaseService } from '../database/database.service';
import { AdminLogsGateway } from '../admin/admin-logs.gateway';
import { Not, IsNull } from 'typeorm';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private readonly botToken = process.env.TELEGRAM_BOT_TOKEN;
  private readonly groupChatId = process.env.TELEGRAM_GROUP_CHAT_ID;

  private sentCount = 0;
  private errorCount = 0;

  constructor(
    private readonly db: DatabaseService,
    @Inject(forwardRef(() => AdminLogsGateway))
    private readonly adminLogsGateway: AdminLogsGateway,
  ) {}

  /** üì¨ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
  async sendFromNotification(notification: Notification) {
    const text = this.formatMessage(notification);
    if (!text) return;

    try {
      if (notification.userId) {
        await this.sendToUser(notification.userId, text);
      } else if (notification.role) {
        await this.sendToRole(notification.role, text);
      } else if (notification.department) {
        await this.sendToDepartment(notification.department, text);
      } else if (this.groupChatId) {
        await this.sendMessage(this.groupChatId, text);
      } else {
        this.logger.warn('‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram');
      }
    } catch (err: unknown) {
      const error = err as Error;
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram', error.stack);
    }
  }

  /** üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é */
  async sendToUser(userId: number, text: string) {
    const user = await this.db.user.findUnique({ where: { id: userId } });
    if (user?.telegramUserId) {
      await this.sendMessage(user.telegramUserId.toString(), text);
    } else {
      this.logger.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=${userId} –Ω–µ –∏–º–µ–µ—Ç telegramUserId`);
    }
  }

  /** üè¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Ç–¥–µ–ª */
  async sendToDepartment(department: Department, text: string) {
    const users = await this.db.user.findMany({
      where: { department, telegramUserId: Not(IsNull()) },
    });

    const chatIds = users
      .map((u) => u.telegramUserId?.toString())
      .filter((id): id is string => !!id);

    await this.sendToMany(chatIds, text);

    this.logger.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª "${department}": ${chatIds.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);
  }

  /** üõ° –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–æ–ª–∏ */
  async sendToRole(role: Role, text: string) {
    const users = await this.db.user.findMany({
      where: { role, telegramUserId: Not(IsNull()) },
    });

    const chatIds = users
      .map((u) => u.telegramUserId?.toString())
      .filter((id): id is string => !!id);

    await this.sendToMany(chatIds, text);

    this.logger.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Ä–æ–ª–∏ "${role}": ${chatIds.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);
  }

  /** üì£ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å Telegram ID */
  async broadcastToAll(text: string) {
    const users = await this.db.user.findMany({
      where: { telegramUserId: Not(IsNull()) },
    });

    const chatIds = users
      .map((u) => u.telegramUserId?.toString())
      .filter((id): id is string => !!id);

    await this.sendToMany(chatIds, text);

    this.logger.log(`üì¢ –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${chatIds.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);
  }

  /** üîÑ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ */
  private async sendToMany(chatIds: string[], text: string) {
    for (const chatId of chatIds) {
      await this.sendMessage(chatId, text);
    }
  }

  /** üßæ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */
  async sendMessage(chatId: string | number, text: string) {
    if (!this.botToken || !chatId || !text) {
      this.logger.warn('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }

    try {
      await axios.post(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });
      this.sentCount++;
      try {
        this.adminLogsGateway.sendLog(`‚úÖ [TG] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      } catch (e) {}
    } catch (err: unknown) {
      const error = err as Error;
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}: ${error.message}`, error.stack);
      this.errorCount++;
      try {
        this.adminLogsGateway.sendLog(`‚ùå [TG] –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}: ${error.message}`);
      } catch (e) {}
    }
  }

  /** üß± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */
  private formatMessage(notification: Notification): string {
    return `<b>${notification.title}</b>\n\n${notification.message}`;
  }

  /** üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç */
  async sendMessageToGroup(text: string) {
    if (!text || !this.groupChatId) {
      this.logger.warn('‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∏–ª–∏ groupChatId');
      return;
    }
    return this.sendMessage(this.groupChatId, text);
  }

  /** üìä –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è UI) */
  async getLatestNotifications() {
    return this.db.notification.findMany({
      orderBy: { createdAt: 'desc' },
      take: 20,
      select: {
        message: true,
        title: true,
        createdAt: true,
        department: true,
        role: true,
      userId: true,
      },
    });
  }

  getStats() {
    return { sent: this.sentCount, errors: this.errorCount };
  }
}
