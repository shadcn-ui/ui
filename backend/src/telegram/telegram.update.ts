import { Update, Ctx, Start, Help, Command, On } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { DatabaseService } from '../database/database.service';
import { Role } from '../enums/user.enums';
import { TelegramService } from './telegram.service';

@Update()
export class TelegramUpdate {
  constructor(
    private readonly db: DatabaseService,
    private readonly telegramService: TelegramService
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await ctx.reply(
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫ –ò–¢-–æ—Ç–¥–µ–ª–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
    );
  }

  @Help()
  async onHelp(@Ctx() ctx: Context) {
    await ctx.reply(
      'üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n' +
      '/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n' +
      '/link –í–ê–®_–ö–û–î - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É\n' +
      '/myrequests - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏\n' +
      '/new –¢–ï–ö–°–¢ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n' +
      '/status ID - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏\n' +
      '/cancel ID - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ NEW)\n' +
      '/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n' +
      '/broadcast –¢–ï–ö–°–¢ - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'
    );
  }

  @Command('admin')
  async onAdmin(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return ctx.reply('‚ùó Telegram ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.');

    const isAdmin = await this.checkUserRole(telegramId, [Role.admin, Role.superuser]);
    if (!isAdmin) return ctx.reply('‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');

    return ctx.reply('üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞.\n\n/droadcast –¢–ï–ö–°–¢ ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º');
  }

  @Command('broadcast')
  async onBroadcast(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id;
    const msg = ctx.message as any;
    const args = msg?.text?.split(' ').slice(1);
    const text = args?.join(' ');

    if (!telegramId || !text) return ctx.reply('üì¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –¢–ï–ö–°–¢');

    const isAdmin = await this.checkUserRole(telegramId, [Role.admin, Role.superuser]);
    if (!isAdmin) return ctx.reply('‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.');

    await this.telegramService.broadcastToAll(`üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n${text}`);
    return ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.');
  }

  @Command('link')
  async link(@Ctx() ctx: Context) {
    const msg = ctx.message as any;
    const args = msg?.text?.split(' ');
    const telegramId = ctx.from?.id;

    if (!telegramId || args.length < 2) {
      return ctx.reply('üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /link –í–ê–®_–ö–û–î');
    }

    const linkToken = args[1];

    const user = await this.db.user.findFirst({
      where: { snils: linkToken },
    });

    if (!user) {
      return ctx.reply('‚ùó –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.');
    }

    await this.db.user.update({
      where: { id: user.id },
      data: { telegramUserId: BigInt(telegramId) },
    });

    return ctx.reply(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${user.lastName} ${user.firstName} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram.`);
  }

  @Command('myrequests')
  async myRequests(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return ctx.reply('‚ùó Telegram ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.');

    const user = await this.db.user.findUnique({
      where: { telegramUserId: BigInt(telegramId) },
      include: {
        requests: {
          orderBy: { createdAt: 'desc' },
          take: 5,
        },
      },
    });

    if (!user) return ctx.reply('üö´ –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –ö–û–î.');

    if (user.requests.length === 0) {
      return ctx.reply('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.');
    }

    const response = user.requests
      .map(r => `üìù *${r.title}*\nüìå –°—Ç–∞—Ç—É—Å: ${r.status}\nüìÖ ${r.createdAt.toLocaleString()}`)
      .join('\n\n');

    return ctx.replyWithMarkdown(response);
  }

  @Command('new')
  async newRequest(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id;
    const msg = ctx.message as any;
    const args = msg?.text?.split(' ').slice(1);
    const content = args?.join(' ');

    if (!telegramId || !content) {
      return ctx.reply('üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /new –¢–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏');
    }

    const user = await this.db.user.findUnique({
      where: { telegramUserId: BigInt(telegramId) },
    });

    if (!user) {
      return ctx.reply('üö´ –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –ö–û–î.');
    }

    const request = await this.db.request.create({
      data: {
        title: content.slice(0, 100),
        content,
        userId: user.id,
        source: 'TELEGRAM',
      },
    });

    return ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${request.id} —Å–æ–∑–¥–∞–Ω–∞!`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìÑ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏', callback_data: `status_${request.id}` }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `cancel_${request.id}` }],
        ],
      },
    });
  }

  @Command('status')
  async status(@Ctx() ctx: Context) {
    const msg = ctx.message as any;
    const args = msg?.text?.split(' ');
    const id = Number(args?.[1]);
    const telegramId = ctx.from?.id;

    if (!telegramId || !id || isNaN(id)) {
      return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status –ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò');
    }

    const request = await this.db.request.findUnique({
      where: { id },
      include: { user: true },
    });

    if (!request || BigInt(request.user.telegramUserId || 0) !== BigInt(telegramId)) {
      return ctx.reply('üö´ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.');
    }

    return ctx.reply(
      `üìù –ó–∞—è–≤–∫–∞ #${request.id}\n` +
      `üìå –°—Ç–∞—Ç—É—Å: ${request.status}\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${request.createdAt.toLocaleString()}`
    );
  }

  @Command('cancel')
  async cancel(@Ctx() ctx: Context) {
    const msg = ctx.message as any;
    const args = msg?.text?.split(' ');
    const id = Number(args?.[1]);
    const telegramId = ctx.from?.id;

    if (!telegramId || !id || isNaN(id)) {
      return ctx.reply('‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel –ù–û–ú–ï–†_–ó–ê–Ø–í–ö–ò');
    }

    const request = await this.db.request.findUnique({
      where: { id },
      include: { user: true },
    });

    if (!request || BigInt(request.user.telegramUserId || 0) !== BigInt(telegramId)) {
      return ctx.reply('üö´ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.');
    }

    if (request.status !== 'NEW') {
      return ctx.reply('‚ùó –ó–∞—è–≤–∫—É –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW.');
    }

    await this.db.request.update({
      where: { id },
      data: { status: 'REJECTED' },
    });

    return ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${request.id} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
  }

  @On('callback_query')
  async handleCallback(@Ctx() ctx: Context) {
    const cb = ctx.callbackQuery as any;
    const data = cb?.data;
    const telegramId = ctx.from?.id;

    if (!data || !telegramId) return;

    const [action, idStr] = data.split('_');
    const requestId = Number(idStr);

    const request = await this.db.request.findUnique({
      where: { id: requestId },
      include: { user: true },
    });

    if (!request || BigInt(request.user.telegramUserId || 0) !== BigInt(telegramId)) {
      return ctx.reply('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
    }

    if (action === 'status') {
      return ctx.reply(
        `üìÑ –ó–∞—è–≤–∫–∞ #${request.id}\n` +
        `–°—Ç–∞—Ç—É—Å: ${request.status}\n` +
        `–°–æ–∑–¥–∞–Ω–∞: ${request.createdAt.toLocaleString()}`
      );
    }

    if (action === 'cancel') {
      if (request.status !== 'NEW') {
        return ctx.reply('‚ùó –ó–∞—è–≤–∫—É –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW.');
      }

      await this.db.request.update({
        where: { id: request.id },
        data: { status: 'REJECTED' },
      });

      return ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${request.id} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
    }
  }

  /** üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  private async checkUserRole(telegramId: number, roles: Role[]): Promise<boolean> {
    const user = await this.db.user.findFirst({
      where: {
        telegramUserId: BigInt(telegramId),
        role: { in: roles },
      },
    });

    return !!user;
  }
}
