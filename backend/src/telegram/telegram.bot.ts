import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import TelegramBot from 'node-telegram-bot-api';
import { DatabaseService } from '../database/database.service';
import { AdminLogsGateway } from '../admin/admin-logs.gateway';
import { TelegramService } from './telegram.service';
import * as dotenv from 'dotenv';
import { Role } from '../enums/user.enums';

dotenv.config();

function normalizePhone(phone: string): string {
  const digits = phone.replace(/\D/g, '');
  const cleaned = digits.replace(/^8/, '7');
  return `+${cleaned}`;
}

@Injectable()
export class TelegramBotService {
  private bot: TelegramBot;
  private readonly logger = new Logger(TelegramBotService.name);

  constructor(
    private db: DatabaseService,
    private telegramService: TelegramService,
    @Inject(forwardRef(() => AdminLogsGateway))
    private readonly adminLogsGateway: AdminLogsGateway,
  ) {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      this.logger.error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env!');
      try {
        this.adminLogsGateway.sendLog('‚ùå [TG] TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω');
      } catch (e) {}
      return;
    }

    this.bot = new TelegramBot(token, { polling: true });
    this.logger.log('ü§ñ TelegramBotService –∑–∞–ø—É—â–µ–Ω —Å polling');
    try {
      this.adminLogsGateway.sendLog('ü§ñ [TG] Bot –∑–∞–ø—É—â–µ–Ω');
    } catch (e) {}

    this.bot.setMyCommands([
      { command: 'start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
      { command: 'auth', description: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
      { command: 'myrequests', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏' },
      { command: 'admin', description: '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' },
    ]);

    this.initCommands();
  }

  private initCommands() {
    this.bot.onText(/\/start(?:\s+.*)?/, this.handleStart.bind(this));
    this.bot.onText(/\/auth/, this.handleAuth.bind(this));
    this.bot.on('contact', this.handleContact.bind(this));
    this.bot.onText(/\/myrequests/, this.handleMyRequests.bind(this));
    this.bot.onText(/\/admin/, this.handleAdmin.bind(this));
    this.bot.onText(/\/stats/, this.handleStats.bind(this));
  }

  private async handleStart(msg: TelegramBot.Message) {
    try {
      const chatId = msg.chat.id;
      const text = msg.text || '';
      const args = text.split(' ');
      const phoneArg = args[1];

      const existing = await this.db.user.findFirst({
        where: { telegramUserId: BigInt(chatId) },
      });

      if (phoneArg) {
        const normalizedPhone = normalizePhone(phoneArg);
        const userByPhone = await this.db.user.findFirst({
          where: { mobilePhone: normalizedPhone },
        });

        if (!userByPhone) {
          return this.bot.sendMessage(chatId, 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        if (userByPhone.telegramUserId) {
          if (BigInt(userByPhone.telegramUserId) === BigInt(chatId)) {
            return this.bot.sendMessage(chatId, '‚úÖ Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.');
          }
          return this.bot.sendMessage(chatId, '‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.');
        }

        await this.db.user.update({
          where: { id: userByPhone.id },
          data: { telegramUserId: BigInt(chatId) },
        });

        return this.bot.sendMessage(chatId, '‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é.');
      }

      if (existing) {
        return this.bot.sendMessage(
          chatId,
          `‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ ${existing.firstName} ${existing.lastName} (${existing.role})`
        );
      }

      this.bot.sendMessage(
        chatId,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –≤—Ö–æ–¥–∞.`
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error instanceof Error ? error.message : error);
      try {
        this.adminLogsGateway.sendLog(`‚ùå [TG] handleStart: ${error instanceof Error ? error.message : error}`);
      } catch (e) {}
    }
  }

  private async handleAuth(msg: TelegramBot.Message) {
    try {
      const chatId = msg.chat.id;
      const user = await this.db.user.findFirst({
        where: { telegramUserId: BigInt(chatId) },
      });

      if (user) {
        return this.bot.sendMessage(
          chatId,
          `‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ ${user.firstName} ${user.lastName} (${user.role})`
        );
      }

      this.bot.sendMessage(chatId, 'üì± –î–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
        reply_markup: {
          keyboard: [[{ text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact: true }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤ handleAuth:', error instanceof Error ? error.message : error);
      try {
        this.adminLogsGateway.sendLog(`‚ùå [TG] handleAuth: ${error instanceof Error ? error.message : error}`);
      } catch (e) {}
    }
  }

  private async handleContact(msg: TelegramBot.Message) {
    try {
      const chatId = msg.chat.id;
      const rawPhone = msg.contact?.phone_number;

      if (!rawPhone) {
        return this.bot.sendMessage(chatId, '‚ùó –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω.');
      }

      const normalizedPhone = normalizePhone(rawPhone);

      const user = await this.db.user.findFirst({
        where: { mobilePhone: normalizedPhone },
      });

      if (!user) {
        return this.bot.sendMessage(chatId, 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }

      await this.db.user.update({
        where: { id: user.id },
        data: { telegramUserId: BigInt(chatId) },
      });

      this.bot.sendMessage(
        chatId,
        `‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ ${user.firstName} ${user.lastName} (${user.role})`
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤ handleContact:', error instanceof Error ? error.message : error);
      try {
        this.adminLogsGateway.sendLog(`‚ùå [TG] handleContact: ${error instanceof Error ? error.message : error}`);
      } catch (e) {}
    }
  }

  private async handleMyRequests(msg: TelegramBot.Message) {
    try {
      const chatId = msg.chat.id;
      const user = await this.db.user.findFirst({
        where: { telegramUserId: BigInt(chatId) },
        include: { requests: true },
      });

      if (!user) {
        return this.bot.sendMessage(chatId, '‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.');
      }

      if (!user.requests || user.requests.length === 0) {
        return this.bot.sendMessage(chatId, 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.');
      }

      const text = user.requests
        .map(r => `üìå ${r.title} ‚Äî [${r.status}] –æ—Ç ${new Date(r.createdAt).toLocaleDateString('ru-RU')}`)
        .join('\n');

      this.bot.sendMessage(chatId, `–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n${text}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤ handleMyRequests:', error instanceof Error ? error.message : error);
      try {
        this.adminLogsGateway.sendLog(`‚ùå [TG] handleMyRequests: ${error instanceof Error ? error.message : error}`);
      } catch (e) {}
    }
  }

  private async handleStats(msg: TelegramBot.Message) {
    try {
      const chatId = msg.chat.id;
      const user = await this.db.user.findFirst({
        where: {
          telegramUserId: BigInt(chatId),
          role: { in: ['admin', 'superuser'] as Role[] },
        },
      });

      if (!user) {
        return this.bot.sendMessage(chatId, '‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      }

      const stats = this.telegramService.getStats();
      this.bot.sendMessage(
        chatId,
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Telegram:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sent}\n–û—à–∏–±–æ–∫: ${stats.errors}`,
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤ handleStats:', error instanceof Error ? error.message : error);
      try {
        this.adminLogsGateway.sendLog(`‚ùå [TG] –û—à–∏–±–∫–∞ –≤ /stats: ${error instanceof Error ? error.message : error}`);
      } catch (e) {}
    }
  }

  private async handleAdmin(msg: TelegramBot.Message) {
    try {
      const chatId = msg.chat.id;

      const user = await this.db.user.findFirst({
        where: {
          telegramUserId: BigInt(chatId),
          role: { in: ['admin', 'superuser'] as Role[] },
        },
      });

      if (!user) {
        return this.bot.sendMessage(chatId, '‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      }

      this.bot.sendMessage(chatId, `üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\nüì¢ /broadcast\nüìä /stats\nüë• /finduser`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤ handleAdmin:', error instanceof Error ? error.message : error);
      try {
        this.adminLogsGateway.sendLog(`‚ùå [TG] handleAdmin: ${error instanceof Error ? error.message : error}`);
      } catch (e) {}
    }
  }
}
