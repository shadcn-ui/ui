import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import cookieParser from 'cookie-parser';
import * as dotenv from 'dotenv';
import { join } from 'path';
import { NestExpressApplication } from '@nestjs/platform-express';
import { ValidationPipe, Logger } from '@nestjs/common';
import * as fs from 'fs';
import { AdminLogsGateway } from './admin/admin-logs.gateway';

async function bootstrap() {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º .env –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º
  dotenv.config();

  const app = await NestFactory.create<NestExpressApplication>(AppModule);

  // üëá –ü–æ–¥–∫–ª—é—á–∞–µ–º Live-–ª–æ–≥ gateway
  const adminLogsGateway = app.get(AdminLogsGateway);

  // üëá –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º console.log, —á—Ç–æ–±—ã –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ live-–ª–æ–≥
  const origConsoleLog = console.log;
  console.log = (...args) => {
    origConsoleLog(...args);
    try {
      adminLogsGateway.sendLog(args.map(String).join(' '));
    } catch (e) {
      const error = e as Error; // ‚úÖ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ —á–µ—Ä–µ–∑ WebSocket:', error.message);
    }
  };

  // –í–∫–ª—é—á–∞–µ–º —Ö—É–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  app.enableShutdownHooks();



  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ cookie-–ø–∞—Ä—Å–µ—Ä–∞
  app.use(cookieParser());
  Logger.log('üç™ –ü–æ–¥–∫–ª—é—á–µ–Ω cookie-parser');

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const uploadsPath = join(__dirname, '..', 'uploads');
  try {
    if (!fs.existsSync(uploadsPath)) {
      fs.mkdirSync(uploadsPath, { recursive: true });
      Logger.log(`üìÅ –ü–∞–ø–∫–∞ uploads —Å–æ–∑–¥–∞–Ω–∞: ${uploadsPath}`);
    }
  } catch (err) {
    const error = err as Error; // ‚úÖ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É uploads:', error.message);
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
  app.useStaticAssets(uploadsPath, { prefix: '/uploads' });
  Logger.log(`üìÇ –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º: http://localhost:${process.env.PORT || 3000}/uploads/...`);

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
    }),
  );

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  const rawOrigins = process.env.FRONTEND_URL;
  const allowedOrigins = rawOrigins
    ? rawOrigins.split(',').map((url) => url.trim())
    : ['http://localhost:3001'];

  Logger.log('‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ CORS:', allowedOrigins);

  app.enableCors({
    origin: allowedOrigins,
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
    allowedHeaders: 'Content-Type, Authorization, Cookie',
  });

  const port = process.env.PORT || 3000;

  try {
    await app.listen(port);
    Logger.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${port}`);
  } catch (error) {
    const err = error as Error; // ‚úÖ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
    console.error('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:', err.message);
    process.exit(1);
  }
}

bootstrap();
