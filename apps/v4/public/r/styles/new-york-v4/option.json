{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "option",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/new-york-v4/ui/option.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst optionVariants = cva(\n  \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"hover:bg-accent hover:text-accent-foreground data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground data-[selected=true]:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface OptionProps\n  extends React.LabelHTMLAttributes<HTMLLabelElement>,\n    VariantProps<typeof optionVariants> {\n  selected?: boolean\n  disabled?: boolean\n}\n\nconst Option = React.forwardRef<HTMLLabelElement, OptionProps>(\n  ({ className, variant, selected, disabled, ...props }, ref) => {\n    return (\n      <label\n        ref={ref}\n        role=\"option\"\n        aria-selected={selected}\n        aria-disabled={disabled}\n        data-selected={selected}\n        data-disabled={disabled}\n        className={cn(optionVariants({ variant, className }))}\n        {...props}\n      />\n    )\n  }\n)\nOption.displayName = \"Option\"\n\nconst OptionIcon = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    className={cn(\"mr-2 h-4 w-4 shrink-0\", className)}\n    {...props}\n  />\n))\nOptionIcon.displayName = \"OptionIcon\"\n\nconst OptionText = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span ref={ref} className={cn(\"flex-1\", className)} {...props} />\n))\nOptionText.displayName = \"OptionText\"\n\nconst OptionTitle = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    className={cn(\"font-medium\", className)}\n    {...props}\n  />\n))\nOptionTitle.displayName = \"OptionTitle\"\n\nconst OptionDescription = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    className={cn(\"text-muted-foreground ml-auto text-xs\", className)}\n    {...props}\n  />\n))\nOptionDescription.displayName = \"OptionDescription\"\n\nexport { Option, OptionIcon, OptionText, OptionTitle, OptionDescription, optionVariants }\n",
      "type": "registry:ui"
    }
  ]
}