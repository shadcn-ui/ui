{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "register-01",
  "type": "registry:block",
  "description": "A simple register form.",
  "dependencies": [
    "@hookform/resolvers",
    "framer-motion",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "avatar",
    "badge",
    "button",
    "card",
    "input",
    "label",
    "progress",
    "separator"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/blocks/register-01/page.tsx",
      "content": "import React from \"react\"\n\nimport { RegistrationForm } from \"@/registry/new-york-v4/blocks/register-01/components/user-registration-form\"\n\nconst page = () => {\n  return (\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n      <div className=\"w-full max-w-2xl\">\n        <RegistrationForm />\n      </div>\n    </div>\n  )\n}\n\nexport default page\n",
      "type": "registry:page",
      "target": "app/register/page.tsx"
    },
    {
      "path": "registry/new-york-v4/blocks/register-01/components/user-registration-form.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useState } from \"react\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport {\n  ArrowLeft,\n  ArrowRight,\n  Building2,\n  Camera,\n  Check,\n  CheckCircle2,\n  Eye,\n  EyeOff,\n  FileText,\n  Home,\n  Lock,\n  Mail,\n  Phone,\n  Shield,\n  Sparkles,\n  Upload,\n  User,\n  Users,\n  X,\n} from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { cn } from \"@/registry/new-york-v4/lib/utils\"\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/new-york-v4/ui/avatar\"\nimport { Badge } from \"@/registry/new-york-v4/ui/badge\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { Card, CardContent } from \"@/registry/new-york-v4/ui/card\"\nimport { Input } from \"@/registry/new-york-v4/ui/input\"\nimport { Label } from \"@/registry/new-york-v4/ui/label\"\nimport { Progress } from \"@/registry/new-york-v4/ui/progress\"\nimport { Separator } from \"@/registry/new-york-v4/ui/separator\"\n\n// Form schemas\nconst basicInfoSchema = z\n  .object({\n    email: z.string().email(\"Please enter a valid email address\"),\n    fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  })\n\nconst contactRoleSchema = z.object({\n  phoneNumber: z.string().optional(),\n  role: z.enum([\"owner\", \"agent\", \"viewer\"], {\n    required_error: \"Please select a role\",\n  }),\n})\n\ntype BasicInfoData = z.infer<typeof basicInfoSchema>\ntype ContactRoleData = z.infer<typeof contactRoleSchema>\n\ninterface RegistrationData extends BasicInfoData, ContactRoleData {\n  profileImage?: string\n  documents?: Array<{ type: string; file: File }>\n}\n\nconst roleOptions = [\n  {\n    value: \"owner\",\n    label: \"Property Owner\",\n    description: \"List and manage your properties\",\n    icon: Home,\n    color:\n      \"bg-blue-50 border-blue-200 text-blue-700 dark:bg-blue-950 dark:border-blue-800 dark:text-blue-300\",\n    iconColor: \"text-blue-600 dark:text-blue-400\",\n  },\n  {\n    value: \"agent\",\n    label: \"Real Estate Agent\",\n    description: \"Represent clients and manage listings\",\n    icon: Building2,\n    color:\n      \"bg-green-50 border-green-200 text-green-700 dark:bg-green-950 dark:border-green-800 dark:text-green-300\",\n    iconColor: \"text-green-600 dark:text-green-400\",\n  },\n  {\n    value: \"viewer\",\n    label: \"Property Seeker\",\n    description: \"Browse and inquire about properties\",\n    icon: Users,\n    color:\n      \"bg-purple-50 border-purple-200 text-purple-700 dark:bg-purple-950 dark:border-purple-800 dark:text-purple-300\",\n    iconColor: \"text-purple-600 dark:text-purple-400\",\n  },\n]\n\nconst documentTypes = [\n  { value: \"id\", label: \"Government ID\", icon: Shield },\n  { value: \"license\", label: \"Real Estate License\", icon: FileText },\n  { value: \"business\", label: \"Business Registration\", icon: Building2 },\n  { value: \"other\", label: \"Other Document\", icon: FileText },\n]\n\nexport function RegistrationForm({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  const [currentStep, setCurrentStep] = useState(0)\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n  const [registrationData, setRegistrationData] = useState<\n    Partial<RegistrationData>\n  >({})\n  const [uploadedDocuments, setUploadedDocuments] = useState<\n    Array<{ type: string; file: File; preview: string }>\n  >([])\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const totalSteps = 5\n  const progress = ((currentStep + 1) / totalSteps) * 100\n\n  const stepTitles = [\n    \"Tell us about yourself\",\n    \"Choose your role (optional)\",\n    \"Upload a profile picture (optional)\",\n    \"Verify your identity\",\n    \"Review Your Information\",\n  ]\n\n  const stepDescriptions = [\n    \"Create Your Account\",\n    \"\",\n    \"\",\n    \"Upload documents to build trust (optional)\",\n    \"Make sure everything looks correct\",\n  ]\n\n  // Form hooks\n  const basicForm = useForm<BasicInfoData>({\n    resolver: zodResolver(basicInfoSchema),\n    defaultValues: registrationData,\n  })\n\n  const contactForm = useForm<ContactRoleData>({\n    resolver: zodResolver(contactRoleSchema),\n    defaultValues: registrationData,\n  })\n\n  const handleNextStep = async () => {\n    let isValid = false\n\n    switch (currentStep) {\n      case 0:\n        isValid = await basicForm.trigger()\n        if (isValid) {\n          const data = basicForm.getValues()\n          setRegistrationData((prev) => ({ ...prev, ...data }))\n        }\n        break\n      case 1:\n        isValid = await contactForm.trigger()\n        if (isValid) {\n          const data = contactForm.getValues()\n          setRegistrationData((prev) => ({ ...prev, ...data }))\n        }\n        break\n      case 2:\n      case 3:\n        isValid = true // Optional steps\n        break\n    }\n\n    if (isValid && currentStep < totalSteps - 1) {\n      setCurrentStep(currentStep + 1)\n    }\n  }\n\n  const handlePrevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1)\n    }\n  }\n\n  const handleFileUpload = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    type: string\n  ) => {\n    const file = event.target.files?.[0]\n    if (file) {\n      const preview = URL.createObjectURL(file)\n      setUploadedDocuments((prev) => [...prev, { type, file, preview }])\n    }\n  }\n\n  const removeDocument = (index: number) => {\n    setUploadedDocuments((prev) => prev.filter((_, i) => i !== index))\n  }\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true)\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n    setIsSubmitting(false)\n    alert(\"Registration successful!\")\n  }\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 0:\n        return (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"space-y-4\"\n          >\n            {/* <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Sparkles className=\"w-8 h-8 text-white\" />\n              </div>\n              <h2 className=\"text-2xl font-bold\">Create Your Account</h2>\n              <p className=\"text-muted-foreground\">\n                Join thousands of property professionals\n              </p>\n            </div> */}\n\n            <div className=\"space-y-3\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email Address\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2 transform\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"wamunyimamukelabai@example.com\"\n                    className=\"h-12 pl-10\"\n                    {...basicForm.register(\"email\")}\n                  />\n                </div>\n                {basicForm.formState.errors.email && (\n                  <p className=\"text-destructive text-sm\">\n                    {basicForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\" className=\"text-sm font-medium\">\n                  Full Name\n                </Label>\n                <div className=\"relative\">\n                  <User className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2 transform\" />\n                  <Input\n                    id=\"fullName\"\n                    placeholder=\"Wamunyima Mukelabai\"\n                    className=\"h-12 pl-10\"\n                    {...basicForm.register(\"fullName\")}\n                  />\n                </div>\n                {basicForm.formState.errors.fullName && (\n                  <p className=\"text-destructive text-sm\">\n                    {basicForm.formState.errors.fullName.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                    Password\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2 transform\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      className=\"h-12 pr-10 pl-10\"\n                      placeholder=\"********\"\n                      {...basicForm.register(\"password\")}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute top-0 right-0 h-12 px-3 hover:bg-transparent\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                  {basicForm.formState.errors.password && (\n                    <p className=\"text-destructive text-sm\">\n                      {basicForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"confirmPassword\"\n                    className=\"text-sm font-medium\"\n                  >\n                    Confirm Password\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2 transform\" />\n                    <Input\n                      id=\"confirmPassword\"\n                      type={showConfirmPassword ? \"text\" : \"password\"}\n                      className=\"h-12 pr-10 pl-10\"\n                      placeholder=\"********\"\n                      {...basicForm.register(\"confirmPassword\")}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute top-0 right-0 h-12 px-3 hover:bg-transparent\"\n                      onClick={() =>\n                        setShowConfirmPassword(!showConfirmPassword)\n                      }\n                    >\n                      {showConfirmPassword ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                  {basicForm.formState.errors.confirmPassword && (\n                    <p className=\"text-destructive text-sm\">\n                      {basicForm.formState.errors.confirmPassword.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )\n\n      case 1:\n        return (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"space-y-4\"\n          >\n            {/* <div className=\"text-center space-y-2\">\n              <h2 className=\"text-2xl font-bold\">Choose Your Role</h2>\n              <p className=\"text-muted-foreground\">\n                This helps us personalize your experience\n              </p>\n            </div> */}\n\n            <div className=\"space-y-3\">\n              <div className=\"grid gap-3\">\n                {roleOptions.map((role) => {\n                  const Icon = role.icon\n                  const isSelected = contactForm.watch(\"role\") === role.value\n                  return (\n                    <motion.div\n                      key={role.value}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      className={cn(\n                        \"relative cursor-pointer rounded-xl border-2 p-4 transition-all duration-200\",\n                        isSelected\n                          ? \"border-primary bg-primary/5 shadow-md\"\n                          : \"border-border hover:border-primary/50 hover:bg-accent/50\"\n                      )}\n                      onClick={() =>\n                        contactForm.setValue(\"role\", role.value as any)\n                      }\n                    >\n                      <div className=\"flex items-start gap-4\">\n                        <div className={cn(\"rounded-lg p-3\", role.color)}>\n                          <Icon className={cn(\"h-6 w-6\", role.iconColor)} />\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <h3 className=\"font-semibold\">{role.label}</h3>\n                            {isSelected && (\n                              <Check className=\"text-primary h-5 w-5\" />\n                            )}\n                          </div>\n                          <p className=\"text-muted-foreground mt-1 text-sm\">\n                            {role.description}\n                          </p>\n                        </div>\n                      </div>\n                      <input\n                        type=\"radio\"\n                        value={role.value}\n                        {...contactForm.register(\"role\")}\n                        className=\"absolute inset-0 cursor-pointer opacity-0\"\n                      />\n                    </motion.div>\n                  )\n                })}\n              </div>\n              {contactForm.formState.errors.role && (\n                <p className=\"text-destructive text-center text-sm\">\n                  {contactForm.formState.errors.role.message}\n                </p>\n              )}\n\n              <Separator className=\"my-6\" />\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phoneNumber\" className=\"text-sm font-medium\">\n                  Phone Number{\" \"}\n                  <span className=\"text-muted-foreground\">(Optional)</span>\n                </Label>\n                <div className=\"relative\">\n                  <Phone className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2 transform\" />\n                  <Input\n                    id=\"phoneNumber\"\n                    type=\"tel\"\n                    placeholder=\"+260 (977) 269 886\"\n                    className=\"h-12 pl-10\"\n                    {...contactForm.register(\"phoneNumber\")}\n                  />\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )\n\n      case 2:\n        return (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"space-y-6\"\n          >\n            <div className=\"space-y-2 text-center\">\n              <h2 className=\"text-2xl font-bold\">Add Your Photo</h2>\n              <p className=\"text-muted-foreground\">\n                Help others recognize you (optional)\n              </p>\n            </div>\n\n            <div className=\"flex flex-col items-center space-y-6\">\n              <div className=\"relative\">\n                <Avatar className=\"border-background h-32 w-32 border-4 shadow-lg\">\n                  <AvatarImage\n                    src={registrationData.profileImage || \"/placeholder.svg\"}\n                  />\n                  <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-2xl text-white\">\n                    {registrationData.fullName\n                      ?.split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\") || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"absolute -right-2 -bottom-2\">\n                  <Button\n                    size=\"sm\"\n                    className=\"h-10 w-10 rounded-full p-0 shadow-lg\"\n                    asChild\n                  >\n                    <label htmlFor=\"profileImage\" className=\"cursor-pointer\">\n                      <Camera className=\"h-4 w-4\" />\n                      <input\n                        id=\"profileImage\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          const file = e.target.files?.[0]\n                          if (file) {\n                            const preview = URL.createObjectURL(file)\n                            setRegistrationData((prev) => ({\n                              ...prev,\n                              profileImage: preview,\n                            }))\n                          }\n                        }}\n                      />\n                    </label>\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2 text-center\">\n                <Button variant=\"outline\" size=\"lg\" className=\"relative\">\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  Choose Photo\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"absolute inset-0 cursor-pointer opacity-0\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0]\n                      if (file) {\n                        const preview = URL.createObjectURL(file)\n                        setRegistrationData((prev) => ({\n                          ...prev,\n                          profileImage: preview,\n                        }))\n                      }\n                    }}\n                  />\n                </Button>\n                <p className=\"text-muted-foreground text-xs\">\n                  JPG, PNG or GIF (max 5MB)\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        )\n\n      case 3:\n        return (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"space-y-4\"\n          >\n            {/* <div className=\"text-center space-y-2\">\n              <h2 className=\"text-2xl font-bold\">Verify Your Identity</h2>\n              <p className=\"text-muted-foreground\">\n                Upload documents to build trust (optional)\n              </p>\n            </div> */}\n\n            <div className=\"space-y-3\">\n              {documentTypes.map((docType) => {\n                const Icon = docType.icon\n                const hasDocument = uploadedDocuments.some(\n                  (doc) => doc.type === docType.value\n                )\n                return (\n                  <div\n                    key={docType.value}\n                    className={cn(\n                      \"rounded-xl border-2 border-dashed p-4 transition-all duration-200\",\n                      hasDocument\n                        ? \"border-green-300 bg-green-50 dark:bg-green-950\"\n                        : \"border-border hover:border-primary/50\"\n                    )}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"bg-accent rounded-lg p-2\">\n                          <Icon className=\"text-muted-foreground h-5 w-5\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium\">{docType.label}</h4>\n                          {hasDocument && (\n                            <p className=\"text-sm text-green-600 dark:text-green-400\">\n                              Document uploaded\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" className=\"relative\">\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        {hasDocument ? \"Replace\" : \"Upload\"}\n                        <input\n                          type=\"file\"\n                          accept=\".pdf,.jpg,.jpeg,.png\"\n                          className=\"absolute inset-0 cursor-pointer opacity-0\"\n                          onChange={(e) => handleFileUpload(e, docType.value)}\n                        />\n                      </Button>\n                    </div>\n                  </div>\n                )\n              })}\n\n              {uploadedDocuments.length > 0 && (\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Uploaded Documents</h4>\n                  {uploadedDocuments.map((doc, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, scale: 0.9 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"bg-accent flex items-center justify-between rounded-lg p-3\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <FileText className=\"text-muted-foreground h-4 w-4\" />\n                        <div>\n                          <p className=\"text-sm font-medium\">\n                            {\n                              documentTypes.find((t) => t.value === doc.type)\n                                ?.label\n                            }\n                          </p>\n                          <p className=\"text-muted-foreground text-xs\">\n                            {doc.file.name}\n                          </p>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeDocument(index)}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </motion.div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </motion.div>\n        )\n\n      case 4:\n        return (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"space-y-4\"\n          >\n            {/* <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle2 className=\"w-8 h-8 text-white\" />\n              </div>\n              <h2 className=\"text-2xl font-bold\">Review Your Information</h2>\n              <p className=\"text-muted-foreground\">\n                Make sure everything looks correct\n              </p>\n            </div> */}\n\n            <div className=\"space-y-3\">\n              <Card className=\"p-6\">\n                <div className=\"mb-4 flex items-center gap-4\">\n                  <Avatar className=\"h-16 w-16\">\n                    <AvatarImage\n                      src={registrationData.profileImage || \"/placeholder.svg\"}\n                    />\n                    <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                      {registrationData.fullName\n                        ?.split(\" \")\n                        .map((n) => n[0])\n                        .join(\"\")}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"text-xl font-semibold\">\n                      {registrationData.fullName}\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      {registrationData.email}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid gap-4\">\n                  <div className=\"flex items-center justify-between border-b py-2\">\n                    <span className=\"text-muted-foreground\">Role</span>\n                    <Badge variant=\"secondary\" className=\"capitalize\">\n                      {\n                        roleOptions.find(\n                          (r) => r.value === registrationData.role\n                        )?.label\n                      }\n                    </Badge>\n                  </div>\n                  {registrationData.phoneNumber && (\n                    <div className=\"flex items-center justify-between border-b py-2\">\n                      <span className=\"text-muted-foreground\">Phone</span>\n                      <span>{registrationData.phoneNumber}</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center justify-between border-b py-2\">\n                    <span className=\"text-muted-foreground\">Documents</span>\n                    <span>{uploadedDocuments.length} uploaded</span>\n                  </div>\n                </div>\n              </Card>\n\n              <div className=\"bg-muted/50 rounded-lg border p-4\">\n                <p className=\"text-muted-foreground text-center text-sm\">\n                  By creating an account, you agree to our{\" \"}\n                  <a href=\"#\" className=\"text-primary hover:underline\">\n                    Terms of Service\n                  </a>{\" \"}\n                  and{\" \"}\n                  <a href=\"#\" className=\"text-primary hover:underline\">\n                    Privacy Policy\n                  </a>\n                  .\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div className={cn(\"mx-auto w-full max-w-2xl\", className)} {...props}>\n      {/* Progress Header */}\n      <div className=\"mb-8\">\n        <div className=\"mb-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-br from-blue-500 to-purple-600\">\n              <span className=\"text-sm font-bold text-white\">\n                {currentStep + 1}\n              </span>\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold\">\n                {stepTitles[currentStep]}\n              </h1>\n              <p className=\"text-muted-foreground text-sm\">\n                {stepDescriptions[currentStep]}\n              </p>\n            </div>\n          </div>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {currentStep + 1} of {totalSteps}\n          </Badge>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      {/* Main Content */}\n      <Card className=\"border-0 shadow-xl\">\n        <CardContent className=\"p-8\">\n          <AnimatePresence mode=\"wait\">{renderStepContent()}</AnimatePresence>\n\n          {/* Navigation */}\n          <div className=\"mt-8 flex items-center justify-between border-t pt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevStep}\n              disabled={currentStep === 0}\n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              Previous\n            </Button>\n\n            {currentStep < totalSteps - 1 ? (\n              <Button\n                onClick={handleNextStep}\n                className=\"flex items-center gap-2\"\n              >\n                {currentStep === 2 || currentStep === 3 ? \"Skip\" : \"Continue\"}\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            ) : (\n              <Button\n                onClick={handleSubmit}\n                disabled={isSubmitting}\n                className=\"flex items-center gap-2\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{\n                        duration: 1,\n                        repeat: Number.POSITIVE_INFINITY,\n                        ease: \"linear\",\n                      }}\n                    >\n                      <CheckCircle2 className=\"h-4 w-4\" />\n                    </motion.div>\n                    Creating Account...\n                  </>\n                ) : (\n                  <>\n                    Create Account\n                    <CheckCircle2 className=\"h-4 w-4\" />\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Footer */}\n      <div className=\"mt-6 text-center\">\n        <p className=\"text-muted-foreground text-sm\">\n          Already have an account?{\" \"}\n          <a href=\"/\" className=\"text-primary font-medium hover:underline\">\n            Sign in here\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "authentication",
    "register"
  ]
}