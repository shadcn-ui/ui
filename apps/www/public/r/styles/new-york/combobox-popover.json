{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox-popover",
  "type": "registry:example",
  "author": "shadcn (https://ui.shadcn.com)",
  "registryDependencies": [
    "combobox",
    "popover"
  ],
  "files": [
    {
      "path": "examples/combobox-popover.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\"\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/registry/new-york/ui/command\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/registry/new-york/ui/popover\"\r\n\r\ntype Status = {\r\n  value: string\r\n  label: string\r\n}\r\n\r\nconst statuses: Status[] = [\r\n  {\r\n    value: \"backlog\",\r\n    label: \"Backlog\",\r\n  },\r\n  {\r\n    value: \"todo\",\r\n    label: \"Todo\",\r\n  },\r\n  {\r\n    value: \"in progress\",\r\n    label: \"In Progress\",\r\n  },\r\n  {\r\n    value: \"done\",\r\n    label: \"Done\",\r\n  },\r\n  {\r\n    value: \"canceled\",\r\n    label: \"Canceled\",\r\n  },\r\n]\r\n\r\nexport default function ComboboxPopover() {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [selectedStatus, setSelectedStatus] = React.useState<Status | null>(\r\n    null\r\n  )\r\n\r\n  return (\r\n    <div className=\"flex items-center space-x-4\">\r\n      <p className=\"text-sm text-muted-foreground\">Status</p>\r\n      <Popover open={open} onOpenChange={setOpen}>\r\n        <PopoverTrigger asChild>\r\n          <Button variant=\"outline\" className=\"w-[150px] justify-start\">\r\n            {selectedStatus ? <>{selectedStatus.label}</> : <>+ Set status</>}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"p-0\" side=\"right\" align=\"start\">\r\n          <Command>\r\n            <CommandInput placeholder=\"Change status...\" />\r\n            <CommandList>\r\n              <CommandEmpty>No results found.</CommandEmpty>\r\n              <CommandGroup>\r\n                {statuses.map((status) => (\r\n                  <CommandItem\r\n                    key={status.value}\r\n                    value={status.value}\r\n                    onSelect={(value) => {\r\n                      setSelectedStatus(\r\n                        statuses.find((priority) => priority.value === value) ||\r\n                          null\r\n                      )\r\n                      setOpen(false)\r\n                    }}\r\n                  >\r\n                    {status.label}\r\n                  </CommandItem>\r\n                ))}\r\n              </CommandGroup>\r\n            </CommandList>\r\n          </Command>\r\n        </PopoverContent>\r\n      </Popover>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}