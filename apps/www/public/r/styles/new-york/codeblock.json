{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "codeblock",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "shiki",
    "hast-util-to-jsx-runtime"
  ],
  "files": [
    {
      "path": "ui/codeblock.tsx",
      "content": "\"use client\"\r\n\r\nimport { useCallback, useEffect, useState, type JSX } from \"react\"\r\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\"\r\nimport { toJsxRuntime } from \"hast-util-to-jsx-runtime\"\r\nimport { Check, Clipboard } from \"lucide-react\"\r\nimport {\r\n  codeToHast,\r\n  type BundledLanguage,\r\n  type BundledTheme,\r\n} from \"shiki/bundle/web\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface CodeBlockProps {\r\n  lang?: BundledLanguage\r\n  theme?: BundledTheme\r\n  maxHeight?: number\r\n  maxWidth?: number\r\n  textSize?: number\r\n  className?: string\r\n  children: React.ReactNode\r\n  showCopy?: boolean\r\n}\r\n\r\n/**\r\n * Syntax Highlights code using Shiki and converts it to JSX elements.\r\n * @param code - The source code string.\r\n * @param lang - Language for syntax highlighting.\r\n * @param theme - Theme for syntax highlighting.\r\n * @returns JSX element containing highlighted code.\r\n */\r\n\r\nasync function highlightCode(\r\n  code: string,\r\n  lang: BundledLanguage,\r\n  theme: BundledTheme\r\n): Promise<JSX.Element> {\r\n  try {\r\n    const hast = await codeToHast(code, { lang, theme })\r\n    return toJsxRuntime(hast, { Fragment, jsx, jsxs }) as JSX.Element\r\n  } catch {\r\n    return <span className=\"text-zinc-100\">{code}</span>\r\n  }\r\n}\r\n\r\n/**\r\n * CodeBlock component renders syntax-highlighted code with optional copy-to-clipboard button.\r\n */\r\nexport default function CodeBlock({\r\n  lang = \"js\",\r\n  theme = \"github-dark\", // Default theme github-dark. You can find all available themes at https://shiki.style/themes\r\n  maxHeight,\r\n  maxWidth,\r\n  textSize,\r\n  className,\r\n  children,\r\n  showCopy = true,\r\n}: CodeBlockProps) {\r\n  const [copied, setCopied] = useState(false)\r\n  const [highlightedContent, setHighlightedContent] =\r\n    useState<JSX.Element | null>(null)\r\n\r\n  const codeText = typeof children === \"string\" ? children : String(children)\r\n\r\n  useEffect(() => {\r\n    let isMounted = true\r\n\r\n    highlightCode(codeText, lang, theme).then((highlighted) => {\r\n      if (isMounted) {\r\n        setHighlightedContent(highlighted)\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      isMounted = false\r\n    }\r\n  }, [codeText, lang, theme])\r\n\r\n  const containerStyle: React.CSSProperties = maxWidth\r\n    ? { maxWidth: `${maxWidth}px` }\r\n    : {}\r\n\r\n  const handleCopy = useCallback(async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(codeText)\r\n      setCopied(true)\r\n      setTimeout(() => setCopied(false), 2000)\r\n    } catch {\r\n      // Failing silently if clipboard API is unavailabl\r\n    }\r\n  }, [codeText])\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"[&_pre]:!bg-muted/40 relative [&_code]:font-mono [&_pre]:overflow-auto [&_pre]:rounded-xl [&_pre]:border [&_pre]:p-4 [&_pre]:leading-snug\",\r\n        className\r\n      )}\r\n      style={containerStyle}\r\n      data-lang={lang}\r\n    >\r\n      {showCopy && (\r\n        <button\r\n          onClick={handleCopy}\r\n          aria-label=\"Copy to clipboard\"\r\n          className=\"bg-muted absolute right-5 top-2 z-10 flex items-center justify-center rounded border p-1 transition-colors\"\r\n        >\r\n          <span className=\"flex items-center gap-1 p-1 text-xs\">\r\n            {copied ? (\r\n              <Check className=\"h-3 w-3\" />\r\n            ) : (\r\n              <Clipboard className=\"h-3 w-3\" />\r\n            )}\r\n          </span>\r\n        </button>\r\n      )}\r\n\r\n      {highlightedContent ? (\r\n        <div\r\n          style={{ fontSize: textSize }}\r\n          className=\"overflow-auto\"\r\n          data-lang={lang}\r\n        >\r\n          <style>\r\n            {`\r\n              div[data-lang] pre {\r\n                max-height: ${maxHeight ?? \"none\"}px;\r\n                overflow: auto;\r\n              }\r\n            `}\r\n          </style>\r\n          {highlightedContent}\r\n        </div>\r\n      ) : (\r\n        <pre\r\n          className=\"text-zinc-100\"\r\n          style={{\r\n            fontSize: textSize,\r\n            maxHeight: maxHeight ? `${maxHeight}px` : undefined,\r\n            overflow: maxHeight ? \"auto\" : undefined,\r\n          }}\r\n        >\r\n          <code>{codeText}</code>\r\n        </pre>\r\n      )}\r\n    </div>\r\n  )\r\n}",
      "type": "registry:ui",
      "target": ""
    }
  ]
}