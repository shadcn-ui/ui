{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "time-picker",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [],
  "registryDependencies": [
    "slider"
  ],
  "files": [
    {
      "path": "ui/time-picker.tsx",
      "content": "\"use client\"\n\nimport React, {\n  HTMLAttributes,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Slider } from \"@/registry/default/ui/slider\"\n\nconst TimePickerContext = createContext({\n  time: 0,\n  timeReducer: (() => {}) as (value: number) => void,\n})\ntype TimePickerContainerProps = {\n  children?: React.ReactNode\n  onTimeChange?: (value: number) => void\n}\nconst TimePickerContainer: React.FC<TimePickerContainerProps> = (props) => {\n  const [time, setTime] = useState(0)\n  return (\n    <TimePickerContext.Provider\n      value={{\n        time: time,\n        timeReducer: (value) => {\n          setTime((prev) => prev + value)\n        },\n      }}\n    >\n      <TimePickerTrigger {...props} />\n    </TimePickerContext.Provider>\n  )\n}\nconst TimePickerTrigger = (props: TimePickerContainerProps) => {\n  const timePickerContext = useContext(TimePickerContext)\n  useEffect(() => {\n    props.onTimeChange?.(timePickerContext.time)\n  }, [props, timePickerContext])\n\n  return <>{props.children}</>\n}\ntype TimePickerProps = {\n  timeMilliseconds: number\n  step?: number\n  minValue?: number\n  maxValue: number\n  prefixLabel?: ((value: number) => React.ReactNode) | React.ReactNode\n  suffixLabel?: ((value: number) => React.ReactNode) | React.ReactNode\n  value?: number\n  onValueChange?: (value: number) => void\n} & HTMLAttributes<HTMLDivElement>\nconst TimePicker = ({\n  timeMilliseconds = 1,\n  step = 1,\n  maxValue = 1000,\n  minValue = 0,\n  value = 0,\n  onValueChange,\n  prefixLabel,\n  suffixLabel,\n  ...props\n}: TimePickerProps) => {\n  const timePickerContext = useContext(TimePickerContext)\n  const [timeValue, setTimeValue] = useState(value - minValue)\n  useEffect(() => {\n    setTimeValue(value - minValue)\n  }, [value])\n  useEffect(() => {\n    onValueChange?.(timeValue + minValue)\n    timePickerContext.timeReducer((timeValue + minValue) * timeMilliseconds)\n    return () => {\n      timePickerContext.timeReducer(-(timeValue + minValue) * timeMilliseconds)\n    }\n  }, [timeValue])\n  const prefix =\n    typeof prefixLabel === \"function\"\n      ? prefixLabel(timeValue + minValue)\n      : prefixLabel\n  const suffix =\n    typeof suffixLabel === \"function\"\n      ? suffixLabel(timeValue + minValue)\n      : suffixLabel\n  return (\n    <div\n      {...props}\n      className={cn(\n        \"flex flex-row items-center justify-around gap-2 w-full h-fit\",\n        props.className\n      )}\n    >\n      {prefix}\n      <Slider\n        defaultValue={[timeValue]}\n        max={maxValue - minValue}\n        step={step}\n        className={cn(\"\")}\n        onValueChange={(v) => {\n          setTimeValue(v[0])\n        }}\n      />\n      {suffix}\n    </div>\n  )\n}\n\nexport { TimePicker, TimePickerContainer }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}