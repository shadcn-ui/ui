{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar-33",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Enhanced date picker with quick year and month selection",
  "registryDependencies": [
    "calendar",
    "button",
    "popover",
    "label"
  ],
  "files": [
    {
      "path": "blocks/calendar-33.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { CalendarIcon, ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport { Label } from \"@/registry/default/ui/label\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/default/ui/popover\"\n\ntype SelectionMode = \"calendar\" | \"year\" | \"month\"\n\ninterface YearSelectionProps {\n  selectedYear: number\n  onYearSelect: (year: number) => void\n  onModeChange: (mode: SelectionMode) => void\n  className?: string\n}\n\nfunction YearSelection({\n  selectedYear,\n  onYearSelect,\n  onModeChange,\n  className,\n}: YearSelectionProps) {\n  const [startYear, setStartYear] = React.useState(() => {\n    const currentYear = new Date().getFullYear()\n    return Math.floor((currentYear - 1) / 12) * 12 + 1\n  })\n\n  React.useEffect(() => {\n    setStartYear(Math.floor((selectedYear - 1) / 12) * 12 + 1)\n  }, [selectedYear])\n\n  // Always show exactly 12 years in 4 rows of 3\n  const years = Array.from({ length: 12 }, (_, i) => startYear + i)\n\n  const handlePrevious = () => {\n    setStartYear((prev) => prev - 12)\n  }\n\n  const handleNext = () => {\n    setStartYear((prev) => prev + 12)\n  }\n\n  const handleYearClick = (year: number) => {\n    onYearSelect(year)\n    onModeChange(\"month\")\n  }\n\n  return (\n    <div className={cn(\"w-[280px] p-3\", className)}>\n      <div className=\"mb-4 flex items-center justify-between\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-8 w-8\"\n          onClick={handlePrevious}\n        >\n          <ChevronLeftIcon className=\"h-4 w-4\" />\n        </Button>\n        <div className=\"text-sm font-medium\">\n          {startYear} - {startYear + 11}\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-8 w-8\"\n          onClick={handleNext}\n        >\n          <ChevronRightIcon className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      <div className=\"grid grid-cols-3 gap-2\">\n        {years.map((year) => {\n          const isSelected = year === selectedYear\n          return (\n            <Button\n              key={year}\n              variant={isSelected ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              className=\"hover:bg-accent hover:text-accent-foreground h-8 text-sm\"\n              onClick={() => handleYearClick(year)}\n            >\n              {year}\n            </Button>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\ninterface MonthSelectionProps {\n  selectedMonth: number\n  selectedYear: number\n  onMonthSelect: (month: number) => void\n  onModeChange: (mode: SelectionMode) => void\n  onYearChange: (year: number) => void\n  className?: string\n}\n\nfunction MonthSelection({\n  selectedMonth,\n  selectedYear,\n  onMonthSelect,\n  onModeChange,\n  onYearChange,\n  className,\n}: MonthSelectionProps) {\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ]\n\n  const handlePrevious = () => {\n    onYearChange(selectedYear - 1)\n  }\n\n  const handleNext = () => {\n    onYearChange(selectedYear + 1)\n  }\n\n  const handleMonthClick = (monthIndex: number) => {\n    onMonthSelect(monthIndex)\n    onModeChange(\"calendar\")\n  }\n\n  return (\n    <div className={cn(\"w-[280px] p-3\", className)}>\n      <div className=\"mb-4 flex items-center justify-between\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-8 w-8\"\n          onClick={handlePrevious}\n        >\n          <ChevronLeftIcon className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          variant=\"ghost\"\n          className=\"h-8 px-2 text-sm font-medium\"\n          onClick={() => onModeChange(\"year\")}\n        >\n          {selectedYear}\n        </Button>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-8 w-8\"\n          onClick={handleNext}\n        >\n          <ChevronRightIcon className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      <div className=\"grid grid-cols-3 gap-2\">\n        {months.map((month, index) => {\n          const isSelected = index === selectedMonth\n          return (\n            <Button\n              key={month}\n              variant={isSelected ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              className=\"hover:bg-accent hover:text-accent-foreground h-8 text-sm\"\n              onClick={() => handleMonthClick(index)}\n            >\n              {month}\n            </Button>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nfunction CalendarDayButton(props: React.ComponentProps<typeof DayButton>) {\n  const { day, modifiers, ...buttonProps } = props\n  const { buttonVariant } = React.useContext(CalendarContext)\n\n  return (\n    <Button\n      variant={modifiers.selected ? \"default\" : buttonVariant}\n      size=\"icon\"\n      className={cn(\n        \"h-8 w-8 p-0 font-normal transition-colors\",\n        modifiers.selected && \"text-primary-foreground\",\n        modifiers.today &&\n          !modifiers.selected &&\n          \"bg-accent text-accent-foreground\",\n        modifiers.outside && \"text-muted-foreground opacity-50\",\n        modifiers.disabled && \"text-muted-foreground opacity-50\",\n        modifiers.range_middle && \"rounded-none\",\n        modifiers.range_start && \"rounded-l-md\",\n        modifiers.range_end && \"rounded-r-md\"\n      )}\n      {...buttonProps}\n    >\n      {day.date.getDate()}\n    </Button>\n  )\n}\n\nconst CalendarContext = React.createContext<{\n  buttonVariant: React.ComponentProps<typeof Button>[\"variant\"]\n}>({\n  buttonVariant: \"ghost\",\n})\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <CalendarContext.Provider value={{ buttonVariant }}>\n      <DayPicker\n        showOutsideDays={showOutsideDays}\n        className={cn(\n          \"bg-background group/calendar w-[280px] p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n          className\n        )}\n        classNames={{\n          root: cn(\"w-fit\", defaultClassNames.root),\n          months: cn(\n            \"relative flex flex-col gap-4 md:flex-row\",\n            defaultClassNames.months\n          ),\n          month: cn(\"flex w-full flex-col gap-4\", defaultClassNames.month),\n          month_caption: cn(\n            \"relative mx-10 flex h-10 items-center justify-center\",\n            defaultClassNames.month_caption\n          ),\n          caption_label: cn(\n            \"text-sm font-medium\",\n            defaultClassNames.caption_label\n          ),\n          nav: cn(\"flex items-center\", defaultClassNames.nav),\n          button_previous: cn(\n            \"text-muted-foreground hover:text-foreground absolute left-1 top-0 h-8 w-8 bg-transparent p-0\",\n            defaultClassNames.button_previous\n          ),\n          button_next: cn(\n            \"text-muted-foreground hover:text-foreground absolute right-1 top-0 h-8 w-8 bg-transparent p-0\",\n            defaultClassNames.button_next\n          ),\n          table: \"w-full border-collapse\",\n          weekdays: cn(\"flex\", defaultClassNames.weekdays),\n          weekday: cn(\n            \"text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal\",\n            defaultClassNames.weekday\n          ),\n          week: cn(\"mt-2 flex w-full\", defaultClassNames.week),\n          day: cn(\n            \"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\",\n            defaultClassNames.day\n          ),\n          range_start: cn(\n            \"bg-accent rounded-l-md\",\n            defaultClassNames.range_start\n          ),\n          range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n          range_end: cn(\"bg-accent rounded-r-md\", defaultClassNames.range_end),\n          today: cn(\n            \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n            defaultClassNames.today\n          ),\n          outside: cn(\n            \"text-muted-foreground aria-selected:text-muted-foreground\",\n            defaultClassNames.outside\n          ),\n          disabled: cn(\n            \"text-muted-foreground opacity-50\",\n            defaultClassNames.disabled\n          ),\n          hidden: cn(\"invisible\", defaultClassNames.hidden),\n          ...classNames,\n        }}\n        components={{\n          Chevron: ({ orientation, ...props }) => {\n            const Icon =\n              orientation === \"left\" ? ChevronLeftIcon : ChevronRightIcon\n            return <Icon className=\"h-4 w-4\" {...props} />\n          },\n          DayButton: CalendarDayButton,\n          ...components,\n        }}\n        captionLayout={captionLayout}\n        formatters={formatters}\n        {...props}\n      />\n    </CalendarContext.Provider>\n  )\n}\n\nfunction EnhancedCalendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const [selectionMode, setSelectionMode] =\n    React.useState<SelectionMode>(\"calendar\")\n  const [displayMonth, setDisplayMonth] = React.useState(() => {\n    const selected = (props as any).selected\n    return selected instanceof Date ? selected : new Date()\n  })\n\n  React.useEffect(() => {\n    const selected = (props as any).selected\n    if (selected instanceof Date) {\n      setDisplayMonth(selected)\n    }\n  }, [(props as any).selected])\n\n  const handleYearSelect = (year: number) => {\n    const newDate = new Date(displayMonth)\n    newDate.setFullYear(year)\n    setDisplayMonth(newDate)\n  }\n\n  const handleMonthSelect = (month: number) => {\n    const newDate = new Date(displayMonth)\n    newDate.setMonth(month)\n    setDisplayMonth(newDate)\n  }\n\n  const handleYearChange = (year: number) => {\n    const newDate = new Date(displayMonth)\n    newDate.setFullYear(year)\n    setDisplayMonth(newDate)\n  }\n\n  if (selectionMode === \"year\") {\n    return (\n      <YearSelection\n        selectedYear={displayMonth.getFullYear()}\n        onYearSelect={handleYearSelect}\n        onModeChange={setSelectionMode}\n        className={className}\n      />\n    )\n  }\n\n  if (selectionMode === \"month\") {\n    return (\n      <MonthSelection\n        selectedMonth={displayMonth.getMonth()}\n        selectedYear={displayMonth.getFullYear()}\n        onMonthSelect={handleMonthSelect}\n        onModeChange={setSelectionMode}\n        onYearChange={handleYearChange}\n        className={className}\n      />\n    )\n  }\n\n  return (\n    <div\n      className={cn(\n        \"bg-background group/calendar w-[280px] p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        className\n      )}\n    >\n      <div className=\"mb-4 flex items-center justify-between\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-8 w-8\"\n          onClick={() => {\n            const newDate = new Date(displayMonth)\n            newDate.setMonth(newDate.getMonth() - 1)\n            setDisplayMonth(newDate)\n          }}\n        >\n          <ChevronLeftIcon className=\"h-4 w-4\" />\n        </Button>\n\n        <div className=\"flex items-center gap-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 px-2 font-medium\"\n            onClick={() => setSelectionMode(\"month\")}\n          >\n            {displayMonth.toLocaleString(undefined, { month: \"short\" })}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 px-2 font-medium\"\n            onClick={() => setSelectionMode(\"year\")}\n          >\n            {displayMonth.getFullYear()}\n          </Button>\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-8 w-8\"\n          onClick={() => {\n            const newDate = new Date(displayMonth)\n            newDate.setMonth(newDate.getMonth() + 1)\n            setDisplayMonth(newDate)\n          }}\n        >\n          <ChevronRightIcon className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      <CalendarContext.Provider value={{ buttonVariant }}>\n        <DayPicker\n          showOutsideDays={showOutsideDays}\n          month={displayMonth}\n          onMonthChange={setDisplayMonth}\n          className={cn(\"[&_.rdp-nav]:hidden\", \"[&_.rdp-caption]:hidden\")}\n          formatters={{\n            formatMonthDropdown: (date) =>\n              date.toLocaleString(\"default\", { month: \"short\" }),\n            ...formatters,\n          }}\n          classNames={{\n            root: cn(\"w-fit\", getDefaultClassNames().root),\n            months: cn(\n              \"relative flex flex-col gap-4 md:flex-row\",\n              getDefaultClassNames().months\n            ),\n            month: cn(\n              \"flex w-full flex-col gap-4\",\n              getDefaultClassNames().month\n            ),\n            nav: cn(\"hidden\", getDefaultClassNames().nav),\n            month_caption: cn(\"hidden\", getDefaultClassNames().month_caption),\n            table: \"w-full border-collapse\",\n            weekdays: cn(\"flex\", getDefaultClassNames().weekdays),\n            weekday: cn(\n              \"text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal\",\n              getDefaultClassNames().weekday\n            ),\n            week: cn(\"mt-2 flex w-full\", getDefaultClassNames().week),\n            day: cn(\n              \"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\",\n              getDefaultClassNames().day\n            ),\n            range_start: cn(\n              \"bg-accent rounded-l-md\",\n              getDefaultClassNames().range_start\n            ),\n            range_middle: cn(\n              \"rounded-none\",\n              getDefaultClassNames().range_middle\n            ),\n            range_end: cn(\n              \"bg-accent rounded-r-md\",\n              getDefaultClassNames().range_end\n            ),\n            today: cn(\n              \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n              getDefaultClassNames().today\n            ),\n            outside: cn(\n              \"text-muted-foreground aria-selected:text-muted-foreground\",\n              getDefaultClassNames().outside\n            ),\n            disabled: cn(\n              \"text-muted-foreground opacity-50\",\n              getDefaultClassNames().disabled\n            ),\n            hidden: cn(\"invisible\", getDefaultClassNames().hidden),\n            ...classNames,\n          }}\n          components={{\n            DayButton: CalendarDayButton,\n            ...components,\n          }}\n          {...props}\n        />\n      </CalendarContext.Provider>\n    </div>\n  )\n}\n\nexport default function Calendar33() {\n  const [date, setDate] = React.useState<Date>()\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"date\" className=\"px-1\">\n        Select date with enhanced picker\n      </Label>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date\"\n            variant=\"outline\"\n            className=\"w-48 justify-between font-normal\"\n          >\n            {date ? date.toLocaleDateString() : \"Pick a date\"}\n            <CalendarIcon className=\"h-4 w-4\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <EnhancedCalendar\n            mode=\"single\"\n            selected={date}\n            onSelect={setDate}\n            initialFocus\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "container": "w-full bg-surface min-h-svh flex px-6 py-12 items-start md:pt-20 justify-center min-w-0 xl:py-24",
    "mobile": "component"
  },
  "categories": [
    "calendar",
    "date"
  ]
}